{"version":3,"sources":["jsx/login.tsx","jsx/loader.jsx","jsx/read.tsx","jsx/update.tsx","jsx/create.tsx","jsx/catalog.tsx","jsx/menu.tsx","index.tsx"],"names":["LoginRequired","component","window","temp","url","Loader","getDataById","textId","getData","this","MessageOff","document","getElementById","style","display","ReactDOM","querySelector","Login","props","state","loginOk","console","log","setState","ContinueLoading","setTimeout","submit","bind","e","preventDefault","email","password","emailElement","passwordElement","value","fetch","String","credentials","then","response","ok","id","type","className","onClick","htmlFor","name","React","json","Promise","reject","data","mounted","catch","MessageOn","err","requestId","requestBody","time","Date","now","method","headers","body","pageNumber","HomeView","formId","mainForm","current","listener","jsonStorage","backgroundColor","checkboxes","i","genresNamesCS","length","push","ref","textCS","Checkbox","defaultChecked","Message","hideMenu","Number","savedTextId","titleCS","SubmitButton","item","CheckedCheckboxesJS","FormData","getAll","map","a","JSON","stringify","postData","form","UpdateView","checked","isGenreCheckedCS","inputText","newText","target","forceUpdate","cols","rows","onChange","formData","TextJS","get","TitleJS","SavedTextId","CreateView","inputTitle","CatalogView","click","slice","navigationButtons","redirect","delete","deleteDataById","songs","titlesAndIds","item2","item1","marginLeft","songsCount","Menu","visibilityCss","visibilityFlag","menu","buttons","select","currentTarget","getAttribute","forEach","index","event","alert","tagName","defaultProps","render","StrictMode"],"mappings":"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","file":"static/js/main.cc9d1c97.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\n\r\nimport { Loader } from \"./loader.jsx\";\r\n\r\ninterface IState {\r\n    style: any;\r\n}\r\n\r\ndeclare global {\r\n    interface Window { textId: number, temp: any }\r\n}\r\n\r\ninterface IProps {\r\n    listener: any;\r\n    formId: any;\r\n    jsonStorage: any;\r\n    id: any;\r\n}\r\n\r\nexport class LoginRequired {\r\n    // восстанавливаем данные (но не последнее действие), не полученные из-за ошибки авторизации\r\n    static ContinueLoading() {\r\n        var component = window.temp;\r\n        if (component) {\r\n            if (component.url === \"/api/update\") {\r\n                // Loader в случае ошибки вызовет MessageOn()\r\n                Loader.getDataById(component, window.textId, component.url);\r\n            } else {\r\n                Loader.getData(component, component.url);\r\n            }\r\n        }\r\n        this.MessageOff();\r\n    }\r\n\r\n    static MessageOff() {\r\n        (document.getElementById(\"loginMessage\")as HTMLElement).style.display = \"none\";\r\n    }\r\n\r\n    static MessageOn(component: any) {\r\n        window.temp = component;\r\n        (document.getElementById(\"loginMessage\")as HTMLElement).style.display = \"block\";\r\n        (document.getElementById(\"login\")as HTMLElement).style.display = \"block\";\r\n        ReactDOM.render(\r\n            <h1>\r\n                LOGIN PLEASE\r\n            </h1>\r\n            , document.querySelector(\"#loginMessage\")\r\n        );\r\n    }\r\n}\r\n\r\nexport class Login extends React.Component<IProps, IState> {\r\n    url: string;\r\n\r\n    public state: IState = {\r\n        style: \"submitStyle\"\r\n    }\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.submit = this.submit.bind(this);\r\n        this.url = \"/account/login\";\r\n        (document.getElementById(\"login\")as HTMLElement).style.display = \"block\";\r\n    }\r\n\r\n    submit(e: any) {\r\n        e.preventDefault();\r\n        let email = \"test_e\";\r\n        let password = \"test_p\";\r\n        let emailElement = document.getElementById('email') as HTMLInputElement;\r\n        let passwordElement = document.getElementById('password') as HTMLInputElement;\r\n        if (emailElement) email = emailElement.value;\r\n        if (passwordElement) password = passwordElement.value;\r\n\r\n        window.fetch(this.url + \"?email=\" + String(email) + \"&password=\" + String(password), { credentials: \"same-origin\" })\r\n            .then(response => response.ok ? this.loginOk() : console.log(\"Login error\"));\r\n    }\r\n\r\n    loginOk = () => {\r\n        console.log(\"Login ok\");\r\n        this.setState({ style: \"submitStyleGreen\" });\r\n        LoginRequired.ContinueLoading();\r\n        setTimeout(() => {\r\n            (document.getElementById(\"login\")as HTMLElement).style.display = \"none\";\r\n        }, 1500);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        // отменяй подписки и асинхронную загрузку\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div id={this.state.style}>\r\n                    <input type=\"checkbox\" id=\"loginButton\" className=\"regular-checkbox\" onClick={this.submit} />\r\n                    <label htmlFor=\"loginButton\">Войти</label>\r\n                </div>\r\n                {/*<div id={this.state.style}>*/}\r\n                &nbsp;&nbsp;&nbsp;&nbsp;\r\n                <span>\r\n                    <input type=\"text\" id=\"email\" name=\"email\" />\r\n                </span>\r\n                {/*<div id={this.state.style}>*/}\r\n                &nbsp;&nbsp;&nbsp;&nbsp;\r\n                <span>\r\n                    <input type=\"text\" id=\"password\" name=\"password\" />\r\n                </span>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n//export default Login;\r\n// загрузка без обработки ошибок\r\n                //fetch(component.url + \"?id=\" + String(window.textId), { credentials: 'same-origin' })\r\n                //    .then(response => response.json())\r\n                //    .then(data => { if (component.mounted) component.setState({ data }) });\r\n\r\n//fetch(component.url, { credentials: 'same-origin' })\r\n                //    .then(response => response.json())\r\n                //    .then(data => { if (component.mounted) component.setState({ data }) });","import { LoginRequired } from \"./login\";//\r\n\r\nexport class Loader {\r\n    //GET request: /api/controller\r\n    static getData(component, url) {\r\n        LoginRequired.MessageOff();\r\n        try {\r\n            window.fetch(url, {\r\n                //устанавливаем куки\r\n                credentials: \"same-origin\"\r\n            })\r\n                .then(response => response.ok ? response.json() : Promise.reject(response))\r\n                .then(data => { if (component.mounted) component.setState({ data }) })\r\n                .catch((e) => LoginRequired.MessageOn(component));//\r\n        } catch (err) {\r\n            console.log(\"Loader try-catch: 1\");\r\n        }\r\n    }\r\n\r\n    //GET request: /api/controller?id=\r\n    static getDataById(component, requestId, url) {\r\n        LoginRequired.MessageOff();\r\n        try {\r\n            window.fetch(url + \"?id=\" + String(requestId), {\r\n                credentials: \"same-origin\"\r\n            })\r\n                .then(response => response.ok ? response.json() : Promise.reject(response))\r\n                .then(data => { if (component.mounted) component.setState({ data }) })\r\n                .catch((e) => LoginRequired.MessageOn(component));//LogForm(component)\r\n        } catch (err) {\r\n            console.log(\"Loader try-catch: 2\");\r\n        }\r\n    }\r\n\r\n    //POST request: /api/controller\r\n    static postData(component, requestBody, url) {\r\n        // ПРОБЛЕМА: при пустых areChecked чекбоксах внешний вид компонента <Сheckboxes> не менялся (после \"ошибки\" POST)\r\n        // при этом все данные были  правильные и рендеринг/обновление проходили успешно (в компоненте <UpdateView>)\r\n        // РЕШЕНИЕ: уникальный key <Checkbox key={\"checkbox \" + i + this.state.time} ...>\r\n        var time = String(Date.now());\r\n        LoginRequired.MessageOff();\r\n        try {\r\n            window.fetch(url, {\r\n                method: \"POST\",\r\n                headers: { 'Content-Type': \"application/json;charset=utf-8\" },\r\n                body: requestBody,\r\n                credentials: \"same-origin\"\r\n            })\r\n                .then(response => response.ok ? response.json() : Promise.reject(response))\r\n                .then(data => component.setState({ data, time }))\r\n                .catch((e) => LoginRequired.MessageOn(component));\r\n        } catch (err) {\r\n            console.log(\"Loader try-catch: 3\");\r\n        }\r\n    }\r\n\r\n    //DELETE request: /api/controller?id=\r\n    static deleteDataById(component, requestId, url, pageNumber) {\r\n        LoginRequired.MessageOff();\r\n        try {\r\n            window.fetch(url + \"?id=\" + String(requestId) + \"&pg=\" + String(pageNumber), {\r\n                method: \"DELETE\",\r\n                credentials: \"same-origin\"\r\n            })\r\n                .then(response => response.ok ? response.json() : Promise.reject(response))\r\n                .then(data => { if (component.mounted) component.setState({ data }) })\r\n                .catch((e) => LoginRequired.MessageOn(component));//LogForm(component)\r\n        } catch (err) {\r\n            console.log(\"Loader try-catch: 2\");\r\n        }\r\n    }\r\n}","import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport { Loader } from \"./loader.jsx\";\r\n\r\ninterface IState {\r\n    data: any;\r\n}\r\ninterface IProps {\r\n    listener: any;\r\n    formId: any;\r\n    jsonStorage: any;\r\n    id: any;\r\n}\r\n\r\nexport class HomeView extends React.Component<IState> {\r\n    url: string;\r\n    formId: any;\r\n    mounted: boolean;\r\n\r\n    public state: IState = {\r\n        data: null\r\n    }\r\n\r\n    mainForm: React.RefObject<HTMLFormElement>;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.url = '/api/read';\r\n        this.formId = null;\r\n        this.mounted = true;\r\n\r\n        this.mainForm = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        //[Obsolete] this.formId = ReactDOM.findDOMNode(this.refs.mainForm);\r\n        this.formId = this.mainForm.current;\r\n        Loader.getData(this, this.url);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        ReactDOM.render(\r\n            <div>\r\n                <SubmitButton listener={this} formId={this.formId} jsonStorage id/>\r\n            </div>,\r\n            document.querySelector(\"#searchButton1\")\r\n        );\r\n        //внешняя зависимость\r\n        (document.getElementById(\"header\")as HTMLElement).style.backgroundColor = \"#e9ecee\";//???\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.mounted = false;\r\n    }\r\n\r\n    render() {\r\n        var checkboxes = [];\r\n        if (this.state.data != null) {\r\n            for (var i = 0; i < this.state.data.genresNamesCS.length; i++) {\r\n                checkboxes.push(<Checkbox key={`checkbox ${i}`} id={i} jsonStorage={this.state.data} listener formId/>);\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                \r\n                <form ref={this.mainForm}//[Obsolete] ref=\"mainForm\"\r\n                    id=\"dizzy\">\r\n                    {checkboxes}\r\n                </form>\r\n                <div id=\"messageBox\">\r\n                    {this.state.data != null && this.state.data.textCS != null &&\r\n                        <Message formId={this.formId} jsonStorage={this.state.data} listener id/>\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Checkbox extends React.Component<IProps> {\r\n    render() {\r\n        var getGenreName = (i: number) => { return this.props.jsonStorage.genresNamesCS[i]; };\r\n        return (\r\n            <div id=\"checkboxStyle\">\r\n                <input name=\"chkButton\" value={this.props.id} type=\"checkbox\" id={this.props.id} className=\"regular-checkbox\" defaultChecked={false} />\r\n                <label htmlFor={this.props.id}>{getGenreName(this.props.id)}</label>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Message extends React.Component<IProps> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.hideMenu = this.hideMenu.bind(this);\r\n    }\r\n\r\n    hideMenu(e: any) {\r\n        if (this.props.formId.style.display !== \"none\") {\r\n            this.props.formId.style.display = \"none\";\r\n            //внешняя зависимость\r\n            (document.getElementById(\"login\")as HTMLElement).style.display = \"none\";/////////////\r\n            return;\r\n        }\r\n        this.props.formId.style.display = \"block\";\r\n    }\r\n\r\n    render() {\r\n        if (this.props.jsonStorage && Number(this.props.jsonStorage.savedTextId) !== 0) window.textId = Number(this.props.jsonStorage.savedTextId);\r\n\r\n        return (\r\n            <span>\r\n                {this.props.jsonStorage != null ? (this.props.jsonStorage.textCS != null ?\r\n                    <span>\r\n                        <div id=\"songTitle\" onClick={this.hideMenu}>\r\n                            {this.props.jsonStorage.titleCS}\r\n                        </div>\r\n                        <div id=\"songBody\">\r\n                                {this.props.jsonStorage.textCS}\r\n                        </div>\r\n                    </span>\r\n                    : \"выберите жанр\")\r\n                    : \"\"}\r\n            </span>\r\n        );\r\n    }\r\n}\r\n\r\nclass SubmitButton extends React.Component<IProps> {\r\n    url: string;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.submit = this.submit.bind(this);\r\n        this.url = '/api/read';\r\n    }\r\n\r\n    submit(e: any) {\r\n        e.preventDefault();\r\n        //внешняя зависимость\r\n        (document.getElementById(\"login\") as HTMLElement).style.display = \"none\";\r\n        var formData = new FormData(this.props.formId);\r\n        var checkboxesArray = (formData.getAll(\"chkButton\")).map(a => Number(a) + 1);\r\n        const item = {\r\n            CheckedCheckboxesJS: checkboxesArray\r\n        };\r\n        var requestBody = JSON.stringify(item);\r\n        Loader.postData(this.props.listener, requestBody, this.url);\r\n        //внешняя зависимость\r\n        (document.getElementById(\"header\") as HTMLElement).style.backgroundColor = \"slategrey\";//#4cff00\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        //отменяй подписки и асинхронную загрузку\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"submitStyle\">\r\n                <input form=\"dizzy\" type=\"checkbox\" id=\"submitButton\" className=\"regular-checkbox\" onClick={this.submit} />\r\n                <label htmlFor=\"submitButton\">Поиск</label>\r\n            </div>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { Loader } from \"./loader.jsx\";\r\n\r\ninterface IState {\r\n    data: any;\r\n    time: any;\r\n}\r\n\r\ninterface IProps {\r\n    listener: any;\r\n    formId: any;\r\n    jsonStorage: any;\r\n    id: any;\r\n}\r\n\r\nclass UpdateView extends React.Component<IProps, IState> {\r\n    url: string;\r\n    formId: any;\r\n    mounted: boolean;\r\n\r\n    public state: IState = {\r\n        data: null,\r\n        time: null\r\n    }\r\n\r\n    mainForm: React.RefObject<HTMLFormElement>;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.url = '/api/update';\r\n        this.formId = null;\r\n        this.mounted = true;\r\n\r\n        this.mainForm = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.formId = this.mainForm.current;\r\n        Loader.getDataById(this, window.textId, this.url);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.mounted = false;\r\n    }\r\n\r\n    render() {\r\n        var checkboxes = [];\r\n        if (this.state != null && this.state.data != null) {\r\n            for (var i = 0; i < this.state.data.genresNamesCS.length; i++) {\r\n                checkboxes.push(<Checkbox key={\"checkbox \" + i + this.state.time} id={i} jsonStorage={this.state.data} listener formId/>);\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <form ref={this.mainForm}\r\n                    id=\"dizzy\">\r\n                    {checkboxes}\r\n                    {this.state.data != null &&\r\n                        <SubmitButton listener={this} formId={this.formId} jsonStorage={this.state.data} id/>\r\n                    }\r\n                </form>\r\n                {this.state.data != null && this.state.data.textCS != null &&\r\n                    <Message formId={this.formId} jsonStorage={this.state.data} listener id/>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Checkbox extends React.Component<IProps> {\r\n    \r\n    render() {\r\n        var checked = this.props.jsonStorage.isGenreCheckedCS[this.props.id] === \"checked\" ? true : false;\r\n        var getGenreName = (i: number) => { return this.props.jsonStorage.genresNamesCS[i]; };\r\n        return (\r\n            <div id=\"checkboxStyle\">\r\n                <input name=\"chkButton\" value={this.props.id} type=\"checkbox\" id={this.props.id} className=\"regular-checkbox\"\r\n                    defaultChecked={checked} />\r\n                <label htmlFor={this.props.id}>{getGenreName(this.props.id)}</label>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Message extends React.Component<IProps> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.hideMenu = this.hideMenu.bind(this);\r\n    }\r\n\r\n    hideMenu(e: any) {\r\n        if (this.props.formId.style.display !== \"none\") {\r\n            this.props.formId.style.display = \"none\";\r\n            return;\r\n        }\r\n        this.props.formId.style.display = \"block\";\r\n    }\r\n\r\n    inputText = (e: any) => {\r\n        const newText = e.target.value;\r\n        this.props.jsonStorage.textCS = newText;\r\n        this.forceUpdate();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div >\r\n                <p />\r\n                {this.props.jsonStorage != null ? (this.props.jsonStorage.textCS != null ?\r\n                    <div>\r\n                        <h1 onClick={this.hideMenu}>\r\n                            {this.props.jsonStorage.titleCS}\r\n                        </h1>\r\n                        <h5>\r\n                            <textarea name=\"msg\" cols={66} rows={30} form=\"dizzy\"\r\n                                value={this.props.jsonStorage.textCS} onChange={this.inputText} />\r\n                        </h5>\r\n                    </div>\r\n                    : \"выберите песню\")\r\n                    : \"loading..\"}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass SubmitButton extends React.Component<IProps> {\r\n    url: string;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.submit = this.submit.bind(this);\r\n        this.url = '/api/update';\r\n    }\r\n\r\n    submit(e: any) {\r\n        e.preventDefault();\r\n        var formData = new FormData(this.props.formId);\r\n        var checkboxesArray = (formData.getAll(\"chkButton\")).map(a => Number(a) + 1);\r\n        var formMessage = formData.get(\"msg\");\r\n        const item = {\r\n            CheckedCheckboxesJS: checkboxesArray,\r\n            TextJS: formMessage,\r\n            TitleJS: this.props.jsonStorage.titleCS,\r\n            SavedTextId: window.textId\r\n            //InitialCheckboxes: this.props.jsonStorage.initialCheckboxes.map(a => Number(a))\r\n        };\r\n        var requestBody = JSON.stringify(item);\r\n        Loader.postData(this.props.listener, requestBody, this.url);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        //отменяй подписки и асинхронную загрузку\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"submitStyle\">\r\n                <input type=\"checkbox\" id=\"submitButton\" className=\"regular-checkbox\" onClick={this.submit} />\r\n                <label htmlFor=\"submitButton\">Сохранить</label>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default UpdateView;","import * as React from 'react';\r\nimport { Loader } from \"./loader.jsx\";\r\n\r\ninterface IState {\r\n    data: any;\r\n    time: any;\r\n}\r\n\r\ninterface IProps {\r\n    listener: any;\r\n    formId: any;\r\n    jsonStorage: any;\r\n    id: any;\r\n}\r\n\r\nclass CreateView extends React.Component<IState> {\r\n    url: string;\r\n    formId: any;\r\n    mounted: boolean;\r\n\r\n    public state: IState = {\r\n        data: null,\r\n        time: null//?????получи реальное время иначе key отвалятся\r\n    }\r\n\r\n    mainForm: React.RefObject<HTMLFormElement>;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.url = \"/api/create\";\r\n        this.formId = null;\r\n        this.mounted = true;\r\n\r\n        this.mainForm = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.formId = this.mainForm.current;\r\n        Loader.getData(this, this.url);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.mounted = false;\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        var id = 0;\r\n        if (this.state.data) id = Number(this.state.data.savedTextId);\r\n        if (id !== 0) window.textId = id;\r\n    }\r\n\r\n    render() {\r\n        var checkboxes = [];\r\n        if (this.state.data != null) {\r\n            for (var i = 0; i < this.state.data.genresNamesCS.length; i++) {\r\n                checkboxes.push(<Checkbox key={`checkbox ${i}${this.state.time}`} id={i} jsonStorage={this.state.data} listener formId/>);\r\n            }\r\n        }\r\n\r\n        var jsonStorage = this.state.data;\r\n        if (jsonStorage) {\r\n            if (!jsonStorage.textCS) jsonStorage.textCS = \"\";\r\n            if (!jsonStorage.titleCS) jsonStorage.titleCS = \"\";\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <form ref={this.mainForm}\r\n                    id=\"dizzy\">\r\n                    {checkboxes}\r\n                    {this.state.data != null &&\r\n                        <SubmitButton listener={this} formId={this.formId} id jsonStorage/>\r\n                    }\r\n                </form>\r\n                {this.state.data != null &&\r\n                    <Message formId={this.formId} jsonStorage={jsonStorage} listener id/>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Checkbox extends React.Component<IProps> {\r\n\r\n    render() {\r\n        var checked = this.props.jsonStorage.isGenreCheckedCS[this.props.id] === \"checked\" ? true : false;\r\n        var getGenreName = (i: number) => { return this.props.jsonStorage.genresNamesCS[i]; };\r\n        return (\r\n            <div id=\"checkboxStyle\">\r\n                <input name=\"chkButton\" value={this.props.id} type=\"checkbox\" id={this.props.id} className=\"regular-checkbox\"\r\n                    defaultChecked={checked} />\r\n                <label htmlFor={this.props.id}>{getGenreName(this.props.id)}</label>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass CheckboxBts extends React.Component<IProps> {\r\n\r\n    render() {\r\n        var checked = this.props.jsonStorage.isGenreCheckedCS[this.props.id] === \"checked\" ? true : false;\r\n        var getGenreName = (i: number) => { return this.props.jsonStorage.genresNamesCS[i]; };\r\n        return (\r\n            //нужен site.css\r\n            <label className=\"checkbox-btn\">\r\n                    <input name=\"chkButton\" value={this.props.id} type=\"checkbox\" id={this.props.id}\r\n                    defaultChecked = { checked } />\r\n                    <span style={{ lineHeight: 30 + 'px' }}>{getGenreName(this.props.id)}</span>\r\n            </label>\r\n        );\r\n    }\r\n}\r\n\r\nclass Message extends React.Component<IProps> {\r\n    inputText = (e: any) => {\r\n        const newText = e.target.value;\r\n        this.props.jsonStorage.textCS = newText;\r\n        this.forceUpdate();\r\n    }\r\n\r\n    inputTitle = (e: any) => {\r\n        const newText = e.target.value;\r\n        this.props.jsonStorage.titleCS = newText;\r\n        this.forceUpdate();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div >\r\n                <p />\r\n                {this.props.jsonStorage != null ?\r\n                    <div>\r\n                        <h5>\r\n                            <textarea name=\"ttl\" cols={66} rows={1} form=\"dizzy\"\r\n                                value={this.props.jsonStorage.titleCS} onChange={this.inputTitle} />\r\n                        </h5>\r\n                        <h5>\r\n                            <textarea name=\"msg\" cols={66} rows={30} form=\"dizzy\"\r\n                                value={this.props.jsonStorage.textCS} onChange={this.inputText} />\r\n                        </h5>\r\n                    </div>\r\n                    : \"loading..\"}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass SubmitButton extends React.Component<IProps> {\r\n    url: string;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.submit = this.submit.bind(this);\r\n        this.url = \"/api/create\";\r\n    }\r\n\r\n    submit(e: any) {\r\n        e.preventDefault();\r\n        var formData = new FormData(this.props.formId);\r\n        var checkboxesArray = (formData.getAll('chkButton')).map(a => Number(a) + 1);\r\n        var formMessage = formData.get('msg');\r\n        var formTitle = formData.get('ttl');\r\n        const item = {\r\n            CheckedCheckboxesJS: checkboxesArray,\r\n            TextJS: formMessage,\r\n            TitleJS: formTitle\r\n        };\r\n        var requestBody = JSON.stringify(item);\r\n        Loader.postData(this.props.listener, requestBody, this.url);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        //отменяй подписки и асинхронную загрузку\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"submitStyle\">\r\n                <input type=\"checkbox\" id=\"submitButton\" className=\"regular-checkbox\" onClick={this.submit} />\r\n                <label htmlFor=\"submitButton\">Создать</label>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CreateView;","import * as React from 'react';\r\nimport { Loader } from \"./loader.jsx\";\r\n\r\ninterface IState {\r\n    data: any;\r\n}\r\ninterface IProps {\r\n    listener: any;\r\n}\r\n\r\nclass CatalogView extends React.Component<IProps, IState> {\r\n    url: string;\r\n    mounted: boolean;\r\n\r\n    public state: IState = {\r\n    data: null\r\n}\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.url = \"/api/catalog\";\r\n        this.mounted = true;\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.mounted = false;\r\n    }\r\n\r\n    componentDidMount() {\r\n        Loader.getDataById(this, 1, this.url);\r\n    }\r\n\r\n    click = (e: any) => {\r\n        e.preventDefault();\r\n        var target = Number(e.target.id.slice(7));\r\n        const item = {\r\n            pageNumber: this.state.data.pageNumber,\r\n            navigationButtons: [target]\r\n        };\r\n        var requestBody = JSON.stringify(item);\r\n        Loader.postData(this, requestBody, this.url);\r\n    }\r\n\r\n    redirect = (e: any) => {\r\n        e.preventDefault();\r\n        var id = Number(e.target.id);\r\n        this.props.listener.setState({ id: id });\r\n    }\r\n\r\n    delete = (e: any) => {\r\n        e.preventDefault();\r\n        var id = Number(e.target.id);\r\n        console.log('You want to delete song with id: ' + id);\r\n        Loader.deleteDataById(this, id, this.url, this.state.data.pageNumber);\r\n    }\r\n\r\n    render() {\r\n        if (!this.state.data) return null;\r\n        var songs = [];\r\n        for (let i = 0; i < this.state.data.titlesAndIds.length; i++) {\r\n            songs.push(\r\n                <tr key={\"song \" + i} className=\"bg-warning\">\r\n                    <td></td>\r\n                    <td>\r\n                        <button className=\"btn btn-outline-light\" id={this.state.data.titlesAndIds[i].item2}\r\n                            onClick={this.redirect}>{this.state.data.titlesAndIds[i].item1}\r\n                        </button>\r\n                    </td>\r\n                    <td>\r\n                        <button className=\"btn btn-outline-light\" id={this.state.data.titlesAndIds[i].item2} onClick={this.delete}>\r\n                            &#10060;\r\n                        </button>\r\n                    </td>\r\n                </tr>);\r\n        }\r\n\r\n        return (\r\n            <div className=\"row\">\r\n                <p style={{ marginLeft: 12 + '%' }}>\r\n                    Всего песен: {this.state.data.songsCount} &nbsp;\r\n                    Страница: {this.state.data.pageNumber} &nbsp;\r\n                </p>\r\n                <p></p>\r\n                <p></p>\r\n                <table className=\"table\" id=\"catalogTable\">\r\n                    <thead className=\"thead-dark \">\r\n                        <tr>\r\n                            <th ></th>\r\n                            <th >\r\n                                <form>\r\n                                    <button id=\"js-nav-1\" className=\"btn btn-info\" onClick={this.click}>\r\n                                         &lt;Назад\r\n                                    </button>\r\n                                    &nbsp;\r\n                                    <button id=\"js-nav-2\" className=\"btn btn-info\" onClick={this.click}>\r\n                                          Вперёд&gt;\r\n                                    </button>\r\n                                </form>\r\n                            </th>\r\n                            <th ></th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {songs}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CatalogView;","import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\n\r\nimport { HomeView } from \"./read\";\r\nimport UpdateView from \"./update\";\r\nimport CreateView from \"./create\";\r\nimport CatalogView from \"./catalog\";\r\nimport { Login } from \"./login\";\r\n\r\ndeclare global {\r\n    interface Window { textId: number }\r\n}\r\nwindow.textId = 0;\r\n\r\ninterface IProps {\r\n    visibilityCss: string[];\r\n    visibilityFlag: boolean[];\r\n    menu: string[];\r\n}\r\n\r\ninterface IState {\r\n    id: number | any;\r\n}\r\n\r\nexport default class Menu extends React.Component<IProps, IState> {\r\n    visibilityCss: string[];\r\n    visibilityFlag: boolean[];\r\n    menu: string[];\r\n    buttons: any;\r\n\r\n    public static defaultProps: Partial<IProps> = {\r\n        visibilityCss: [\"act\", \"pas\", \"pas\", \"pas\"],\r\n        visibilityFlag: [true, false, false, false],\r\n        menu: [\"Посмотреть\", \"Поменять\", \"Создать\", \"Каталог\"]\r\n    }\r\n    public state: IState = {\r\n        id: null\r\n    }\r\n\r\n    constructor(a: IProps) {\r\n        super(a);\r\n        this.select = this.select.bind(this);\r\n        this.visibilityCss = [\"act\", \"pas\", \"pas\", \"pas\"];\r\n        this.visibilityFlag = [true, false, false, false];\r\n        this.menu = [\"Посмотреть\", \"Поменять\", \"Создать\", \"Каталог\"];\r\n    }\r\n\r\n    select(e: any) {\r\n        var target = Number(e.currentTarget.getAttribute('id').slice(5));\r\n        //если меняем невыбранное\r\n        if (target === 1 && window.textId === 0) return;\r\n\r\n        this.visibilityFlag.forEach((value, index) => this.visibilityFlag[index] = false);\r\n        this.visibilityFlag[target] = !this.visibilityFlag[target];\r\n        this.forceUpdate();//this.setState(this.state)\r\n    }\r\n\r\n    handleClick(event: any) {\r\n        event.preventDefault();\r\n        alert(event.currentTarget.tagName);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.state.id) this.setState({ id: null });\r\n        if (!this.visibilityFlag[0]) {\r\n            //костыль, убирает кнопку \"Поиск\"\r\n            ReactDOM.render(\r\n                <div>\r\n                </div>,\r\n                document.querySelector(\"#searchButton1\")\r\n            );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        //костыль - переключаемся из catalog на changeText\r\n        if (this.state.id) {\r\n            this.visibilityFlag = [false, true, false, false];\r\n            window.textId = this.state.id;\r\n        }\r\n\r\n        this.visibilityFlag.forEach((value, index) => this.visibilityFlag[index] ?\r\n            this.visibilityCss[index] = \"act\" : this.visibilityCss[index] = \"pas\");\r\n\r\n        this.buttons = [];\r\n        for (let i = 0; i < 4; i++) {\r\n            this.buttons.push(<button key={\"menu \" + i} onClick={this.select} id={\"menu \" + String(i)}\r\n                className={this.visibilityCss[i]}\r\n            //className=\"btn btn-info\" style={{ margin: 10 + 'px' }}\r\n            >\r\n                {this.menu[i]}</button>);\r\n        }\r\n\r\n        //+TODO: не отображать кнопку пока не загрузилось\r\n        //+TODO: менять цвет кнопки при выполнении POST запроса\r\n        //+TODO: зачем view={this.visibilityFlag[0]}\r\n        //TODO: список жанров точно один на всю сессию (кол-во песен в них будет отличаться) - зачем его грузить каждый раз?\r\n        //TODO: экран некрасиво мигает при переключении пунктов меню\r\n\r\n        return (\r\n            <div>\r\n                <div id=\"header\">\r\n                    {this.buttons}\r\n                </div>\r\n                {/*первый пункт меню*/}\r\n                {this.visibilityFlag[0] === true &&\r\n                    <div id=\"renderContainer1\">\r\n                        <HomeView data />\r\n                    </div>\r\n                }\r\n                {/*второй пункт меню*/}\r\n                {this.visibilityFlag[1] === true &&\r\n                    <div id=\"renderContainer\">\r\n                        <UpdateView listener formId id jsonStorage />\r\n                    </div>\r\n                }\r\n                {/*третий пункт меню*/}\r\n                {this.visibilityFlag[2] === true &&\r\n                    <div id=\"renderContainer\">\r\n                        <CreateView data time />\r\n                    </div>\r\n                }\r\n                {/*четвертый пункт меню*/}\r\n                {this.visibilityFlag[3] === true &&\r\n                    <div id=\"renderContainer\">\r\n                        <CatalogView listener={this} />\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nReactDOM.render(\r\n    <Login listener={this} formId jsonStorage id/>\r\n    , document.querySelector(\"#renderLoginForm\")\r\n);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Menu from \"./jsx/menu\";\nimport './bootstrap.css';\nimport './react.css';\n\nconsole.log('start');\nReactDOM.render(\n    <React.StrictMode>\n        <Menu />\n    </React.StrictMode>\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n\n//ReactDOM.render(\n//    <React.StrictMode>\n//        <Test />\n//    </React.StrictMode>\n//    ,\n//    document.getElementById('root')\n//);"],"sourceRoot":""}