{"version":3,"sources":["jsx/login.tsx","jsx/loader.tsx","jsx/read.tsx","jsx/update.tsx","jsx/create.tsx","jsx/catalog.tsx","jsx/menu.tsx","index.tsx"],"names":["LoginRequired","component","window","temp","url","Loader","getDataById","textId","getData","this","MessageOff","document","getElementById","style","display","ReactDOM","querySelector","Login","React","constructor","props","super","corsAddress","state","credos","loginErr","cookie","console","log","loginOk","setState","ContinueLoading","setTimeout","submit","bind","e","preventDefault","email","password","emailElement","passwordElement","value","fetch","String","credentials","then","response","ok","componentWillUnmount","render","id","type","className","onClick","htmlFor","name","json","Promise","reject","data","mounted","catch","MessageOn","err","requestId","requestBody","time","Date","now","method","headers","body","pageNumber","HomeView","formId","mainForm","componentDidMount","current","componentDidUpdate","listener","jsonStorage","backgroundColor","checkboxes","i","genresNamesCS","length","push","key","ref","textCS","Checkbox","defaultChecked","getGenreName","Message","hideMenu","Number","savedTextId","titleCS","SubmitButton","item","CheckedCheckboxesJS","FormData","getAll","map","a","JSON","stringify","postData","form","UpdateView","checked","isGenreCheckedCS","getCookie","matches","match","RegExp","replace","decodeURIComponent","inputText","newText","target","forceUpdate","cols","rows","onChange","formData","TextJS","get","TitleJS","SavedTextId","CreateView","inputTitle","findUrl","readUrl","storage","btn","cancel","finder","formMessage","formTitle","promise","checkScanResult","res","result","undefined","index","array","Object","keys","sort","b","ind","getTitle","parse","checkboxesArray","CatalogView","logoutUrl","click","slice","navigationButtons","logout","redirect","delete","deleteDataById","songs","titlesAndIds","item2","item1","marginLeft","songsCount","Menu","visibilityCss","visibilityFlag","menu","buttons","select","currentTarget","getAttribute","forEach","handleClick","event","alert","tagName","defaultProps","StrictMode"],"mappings":"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","file":"static/js/main.8951ccaf.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\n\r\nimport { Loader } from \"./loader\";\r\n\r\ninterface IState {\r\n    style: any;\r\n}\r\n\r\ndeclare global {\r\n    interface Window { textId: number, temp: any }\r\n}\r\n\r\ninterface IProps {\r\n    listener: any;\r\n    formId: any;\r\n    jsonStorage: any;\r\n    id: any;\r\n}\r\n\r\nexport class LoginRequired {\r\n    // восстанавливаем данные (но не последнее действие), не полученные из-за ошибки авторизации\r\n    static ContinueLoading() {\r\n        var component = window.temp;\r\n        if (component) {\r\n            if (component.url === \"/api/update\") {\r\n                // Loader в случае ошибки вызовет MessageOn()\r\n                Loader.getDataById(component, window.textId, component.url);\r\n            } else {\r\n                Loader.getData(component, component.url);\r\n            }\r\n        }\r\n        this.MessageOff();\r\n    }\r\n\r\n    static MessageOff() {\r\n        (document.getElementById(\"loginMessage\")as HTMLElement).style.display = \"none\";\r\n    }\r\n\r\n    static MessageOn(component: any) {\r\n        window.temp = component;\r\n        (document.getElementById(\"loginMessage\")as HTMLElement).style.display = \"block\";\r\n        (document.getElementById(\"login\")as HTMLElement).style.display = \"block\";\r\n        ReactDOM.render(\r\n            <h1>\r\n                LOGIN PLEASE\r\n            </h1>\r\n            , document.querySelector(\"#loginMessage\")\r\n        );\r\n    }\r\n}\r\n\r\nexport class Login extends React.Component<IProps, IState> {\r\n    url: string;\r\n    corsAddress: string;\r\n\r\n    public state: IState = {\r\n        style: \"submitStyle\"\r\n    }\r\n    \r\n    private credos: \"omit\" | \"same-origin\" | \"include\";\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.submit = this.submit.bind(this);\r\n        this.url = \"/account/login\";\r\n\r\n        // TODO: вынеси в Loader или меню \r\n        this.credos = Loader.credos; // \"include\"; // or \"same-origin\"\r\n        this.corsAddress = Loader.corsAddress; // \"http://localhost:5000\";\r\n        this.url = this.corsAddress + this.url;\r\n        \r\n        (document.getElementById(\"login\")as HTMLElement).style.display = \"block\";\r\n    }\r\n\r\n    submit(e: any) {\r\n        e.preventDefault();\r\n        let email = \"test_e\";\r\n        let password = \"test_p\";\r\n        let emailElement = document.getElementById('email') as HTMLInputElement;\r\n        let passwordElement = document.getElementById('password') as HTMLInputElement;\r\n        if (emailElement) email = emailElement.value;\r\n        if (passwordElement) password = passwordElement.value;\r\n\r\n        window.fetch(this.url + \"?email=\" + String(email) + \"&password=\" + String(password),\r\n            {credentials: this.credos})\r\n            .then(response => response.ok ? this.loginOk() : this.loginErr());\r\n    }\r\n    \r\n    loginErr = () => {\r\n        // установим локальные куки\r\n        document.cookie = 'rsse_auth = false';\r\n        console.log(\"Login error\");\r\n    }\r\n\r\n    loginOk = () => {\r\n        // установим локальные куки\r\n        document.cookie = 'rsse_auth = true';\r\n        console.log(\"Login ok\");\r\n        this.setState({ style: \"submitStyleGreen\" });\r\n        LoginRequired.ContinueLoading();\r\n        setTimeout(() => {\r\n            (document.getElementById(\"login\")as HTMLElement).style.display = \"none\";\r\n        }, 1500);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        // отменяй подписки и асинхронную загрузку\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div id={this.state.style}>\r\n                    <input type=\"checkbox\" id=\"loginButton\" className=\"regular-checkbox\" onClick={this.submit} />\r\n                    <label htmlFor=\"loginButton\">Войти</label>\r\n                </div>\r\n                {/*<div id={this.state.style}>*/}\r\n                &nbsp;&nbsp;&nbsp;&nbsp;\r\n                <span>\r\n                    <input type=\"text\" id=\"email\" name=\"email\" />\r\n                </span>\r\n                {/*<div id={this.state.style}>*/}\r\n                &nbsp;&nbsp;&nbsp;&nbsp;\r\n                <span>\r\n                    <input type=\"text\" id=\"password\" name=\"password\" />\r\n                </span>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n//export default Login;\r\n// загрузка без обработки ошибок\r\n                //fetch(component.url + \"?id=\" + String(window.textId), { credentials: 'same-origin' })\r\n                //    .then(response => response.json())\r\n                //    .then(data => { if (component.mounted) component.setState({ data }) });\r\n\r\n//fetch(component.url, { credentials: 'same-origin' })\r\n                //    .then(response => response.json())\r\n                //    .then(data => { if (component.mounted) component.setState({ data }) });","import { LoginRequired } from \"./login\";//\r\n\r\nexport class Loader {\r\n    // \"same-origin\" или \"include\" для запуска на nodejs\r\n    static readonly credos: \"omit\" | \"same-origin\" | \"include\" = \"same-origin\"; \r\n    static readonly corsAddress: string = \"\"; // \"http://localhost:5000\"; для запуска на nodejs\r\n\r\n    //GET request: /api/controller\r\n    static getData(component: any, url: any) {\r\n        LoginRequired.MessageOff();\r\n\r\n        url = this.corsAddress + url;\r\n\r\n        try {\r\n            window.fetch(url, {\r\n                credentials: this.credos\r\n            })\r\n                .then(response => response.ok ? response.json() : Promise.reject(response))\r\n                .then(data => {\r\n                    if (component.mounted) component.setState({data})\r\n                })\r\n                .catch((e) => LoginRequired.MessageOn(component));//\r\n        } catch (err) {\r\n            console.log(\"Loader try-catch: 1\");\r\n        }\r\n    }\r\n\r\n    //GET request: /api/controller?id=\r\n    static getDataById(component: any, requestId: any, url: any) {\r\n        LoginRequired.MessageOff();\r\n        \r\n        url = this.corsAddress + url;\r\n        \r\n        try {\r\n            window.fetch(url + \"?id=\" + String(requestId), {\r\n                //credentials: \"same-origin\"\r\n                credentials: this.credos\r\n            })\r\n                .then(response => response.ok ? response.json() : Promise.reject(response))\r\n                .then(data => { if (component.mounted) component.setState({ data }) })\r\n                .catch((e) => LoginRequired.MessageOn(component));//LogForm(component)\r\n        } catch (err) {\r\n            console.log(\"Loader try-catch: 2\");\r\n        }\r\n    }\r\n\r\n    //POST request: /api/controller\r\n    static postData(component: any, requestBody: any, url: any) {\r\n        // ПРОБЛЕМА: при пустых areChecked чекбоксах внешний вид компонента <Сheckboxes> не менялся (после \"ошибки\" POST)\r\n        // при этом все данные были  правильные и рендеринг/обновление проходили успешно (в компоненте <UpdateView>)\r\n        // РЕШЕНИЕ: уникальный key <Checkbox key={\"checkbox \" + i + this.state.time} ...>\r\n        var time = String(Date.now());\r\n        LoginRequired.MessageOff();\r\n        \r\n        url = this.corsAddress + url;\r\n        \r\n        try {\r\n            window.fetch(url, {\r\n                method: \"POST\",\r\n                headers: { 'Content-Type': \"application/json;charset=utf-8\" },\r\n                body: requestBody,\r\n                credentials: this.credos\r\n            })\r\n                .then(response => response.ok ? response.json() : Promise.reject(response))\r\n                .then(data => component.setState({ data, time }))\r\n                .catch((e) => LoginRequired.MessageOn(component));\r\n        } catch (err) {\r\n            console.log(\"Loader try-catch: 3\");\r\n        }\r\n    }\r\n\r\n    //DELETE request: /api/controller?id=\r\n    static deleteDataById(component: any, requestId: any, url: any, pageNumber: any) {\r\n        LoginRequired.MessageOff();\r\n        \r\n        url = this.corsAddress + url;\r\n        \r\n        try {\r\n            window.fetch(url + \"?id=\" + String(requestId) + \"&pg=\" + String(pageNumber), {\r\n                method: \"DELETE\",\r\n                credentials: this.credos\r\n            })\r\n                .then(response => response.ok ? response.json() : Promise.reject(response))\r\n                .then(data => { if (component.mounted) component.setState({ data }) })\r\n                .catch((e) => LoginRequired.MessageOn(component));//LogForm(component)\r\n        } catch (err) {\r\n            console.log(\"Loader try-catch: 2\");\r\n        }\r\n    }\r\n}","import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport { Loader } from \"./loader\";\r\n\r\ninterface IState {\r\n    data: any;\r\n}\r\ninterface IProps {\r\n    listener: any;\r\n    formId: any;\r\n    jsonStorage: any;\r\n    id: any;\r\n}\r\n\r\nexport class HomeView extends React.Component<IState> {\r\n    url: string;\r\n    formId: any;\r\n    mounted: boolean;\r\n\r\n    public state: IState = {\r\n        data: null\r\n    }\r\n\r\n    mainForm: React.RefObject<HTMLFormElement>;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.url = '/api/read';\r\n        this.formId = null;\r\n        this.mounted = true;\r\n\r\n        this.mainForm = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        //[Obsolete] this.formId = ReactDOM.findDOMNode(this.refs.mainForm);\r\n        this.formId = this.mainForm.current;\r\n        Loader.getData(this, this.url);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        ReactDOM.render(\r\n            <div>\r\n                <SubmitButton listener={this} formId={this.formId} jsonStorage id/>\r\n            </div>,\r\n            document.querySelector(\"#searchButton1\")\r\n        );\r\n        //внешняя зависимость\r\n        (document.getElementById(\"header\")as HTMLElement).style.backgroundColor = \"#e9ecee\";//???\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.mounted = false;\r\n    }\r\n\r\n    render() {\r\n        var checkboxes = [];\r\n        if (this.state.data != null) {\r\n            for (var i = 0; i < this.state.data.genresNamesCS.length; i++) {\r\n                checkboxes.push(<Checkbox key={`checkbox ${i}`} id={i} jsonStorage={this.state.data} listener formId/>);\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                \r\n                <form ref={this.mainForm}//[Obsolete] ref=\"mainForm\"\r\n                    id=\"dizzy\">\r\n                    {checkboxes}\r\n                </form>\r\n                <div id=\"messageBox\">\r\n                    {this.state.data != null && this.state.data.textCS != null &&\r\n                        <Message formId={this.formId} jsonStorage={this.state.data} listener id/>\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Checkbox extends React.Component<IProps> {\r\n    render() {\r\n        var getGenreName = (i: number) => { return this.props.jsonStorage.genresNamesCS[i]; };\r\n        return (\r\n            <div id=\"checkboxStyle\">\r\n                <input name=\"chkButton\" value={this.props.id} type=\"checkbox\" id={this.props.id} className=\"regular-checkbox\" defaultChecked={false} />\r\n                <label htmlFor={this.props.id}>{getGenreName(this.props.id)}</label>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Message extends React.Component<IProps> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.hideMenu = this.hideMenu.bind(this);\r\n    }\r\n\r\n    hideMenu(e: any) {\r\n        if (this.props.formId.style.display !== \"none\") {\r\n            this.props.formId.style.display = \"none\";\r\n            //внешняя зависимость\r\n            (document.getElementById(\"login\")as HTMLElement).style.display = \"none\";/////////////\r\n            return;\r\n        }\r\n        this.props.formId.style.display = \"block\";\r\n    }\r\n\r\n    render() {\r\n        if (this.props.jsonStorage && Number(this.props.jsonStorage.savedTextId) !== 0) window.textId = Number(this.props.jsonStorage.savedTextId);\r\n\r\n        return (\r\n            <span>\r\n                {this.props.jsonStorage != null ? (this.props.jsonStorage.textCS != null ?\r\n                    <span>\r\n                        <div id=\"songTitle\" onClick={this.hideMenu}>\r\n                            {this.props.jsonStorage.titleCS}\r\n                        </div>\r\n                        <div id=\"songBody\">\r\n                                {this.props.jsonStorage.textCS}\r\n                        </div>\r\n                    </span>\r\n                    : \"выберите жанр\")\r\n                    : \"\"}\r\n            </span>\r\n        );\r\n    }\r\n}\r\n\r\nclass SubmitButton extends React.Component<IProps> {\r\n    url: string;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.submit = this.submit.bind(this);\r\n        this.url = '/api/read';\r\n    }\r\n\r\n    submit(e: any) {\r\n        e.preventDefault();\r\n        //внешняя зависимость\r\n        (document.getElementById(\"login\") as HTMLElement).style.display = \"none\";\r\n        var formData = new FormData(this.props.formId);\r\n        var checkboxesArray = (formData.getAll(\"chkButton\")).map(a => Number(a) + 1);\r\n        const item = {\r\n            CheckedCheckboxesJS: checkboxesArray\r\n        };\r\n        var requestBody = JSON.stringify(item);\r\n        Loader.postData(this.props.listener, requestBody, this.url);\r\n        //внешняя зависимость\r\n        (document.getElementById(\"header\") as HTMLElement).style.backgroundColor = \"slategrey\";//#4cff00\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        //отменяй подписки и асинхронную загрузку\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"submitStyle\">\r\n                <input form=\"dizzy\" type=\"checkbox\" id=\"submitButton\" className=\"regular-checkbox\" onClick={this.submit} />\r\n                <label htmlFor=\"submitButton\">Поиск</label>\r\n            </div>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { Loader } from \"./loader\";\r\n\r\ninterface IState {\r\n    data: any;\r\n    time: any;\r\n}\r\n\r\ninterface IProps {\r\n    listener: any;\r\n    formId: any;\r\n    jsonStorage: any;\r\n    id: any;\r\n}\r\n\r\nclass UpdateView extends React.Component<IProps, IState> {\r\n    url: string;\r\n    formId: any;\r\n    mounted: boolean;\r\n\r\n    public state: IState = {\r\n        data: null,\r\n        time: null\r\n    }\r\n\r\n    mainForm: React.RefObject<HTMLFormElement>;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.url = '/api/update';\r\n        this.formId = null;\r\n        this.mounted = true;\r\n\r\n        this.mainForm = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.formId = this.mainForm.current;\r\n        Loader.getDataById(this, window.textId, this.url);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.mounted = false;\r\n    }\r\n\r\n    render() {\r\n        var checkboxes = [];\r\n        if (this.state != null && this.state.data != null) {\r\n            for (var i = 0; i < this.state.data.genresNamesCS.length; i++) {\r\n                checkboxes.push(<Checkbox key={\"checkbox \" + i + this.state.time} id={i} jsonStorage={this.state.data} listener formId/>);\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <form ref={this.mainForm}\r\n                    id=\"dizzy\">\r\n                    {checkboxes}\r\n                    {this.state.data != null &&\r\n                        <SubmitButton listener={this} formId={this.formId} jsonStorage={this.state.data} id/>\r\n                    }\r\n                </form>\r\n                {this.state.data != null && this.state.data.textCS != null &&\r\n                    <Message formId={this.formId} jsonStorage={this.state.data} listener id/>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Checkbox extends React.Component<IProps> {\r\n    \r\n    render() {\r\n        var checked = this.props.jsonStorage.isGenreCheckedCS[this.props.id] === \"checked\" ? true : false;\r\n        var getGenreName = (i: number) => { return this.props.jsonStorage.genresNamesCS[i]; };\r\n        return (\r\n            <div id=\"checkboxStyle\">\r\n                <input name=\"chkButton\" value={this.props.id} type=\"checkbox\" id={this.props.id} className=\"regular-checkbox\"\r\n                    defaultChecked={checked} />\r\n                <label htmlFor={this.props.id}>{getGenreName(this.props.id)}</label>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Message extends React.Component<IProps> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.hideMenu = this.hideMenu.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getCookie();\r\n    }\r\n\r\n    // name: .AspNetCore.Cookies\r\n    getCookie = () => {\r\n        // выставляются в компоненте Login\r\n        const name = \"rsse_auth\";\r\n        var matches = document.cookie.match(new RegExp(\r\n            \"(?:^|; )\" + name.replace(/([\\.$?*|{}\\(\\)\\[\\]\\\\\\/\\+^])/g, '\\\\$1') + \"=([^;]*)\"\r\n        ));\r\n\r\n        // return matches ? decodeURIComponent(matches[1]) : undefined;\r\n        if (matches == null || decodeURIComponent(matches[1]) === 'false')\r\n        {\r\n            this.hideMenu('something_stuff');\r\n        }\r\n    }\r\n    \r\n    // hideMenu() сидит в каждом компоненте !\r\n    hideMenu(e: any) {\r\n        if (this.props.formId.style.display !== \"none\") {\r\n            this.props.formId.style.display = \"none\";\r\n            return;\r\n        }\r\n        this.props.formId.style.display = \"block\";\r\n    }\r\n\r\n    inputText = (e: any) => {\r\n        const newText = e.target.value;\r\n        this.props.jsonStorage.textCS = newText;\r\n        this.forceUpdate();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div >\r\n                <p />\r\n                {this.props.jsonStorage != null ? (this.props.jsonStorage.textCS != null ?\r\n                    <div>\r\n                        <h1 onClick={this.hideMenu}>\r\n                            {this.props.jsonStorage.titleCS}\r\n                        </h1>\r\n                        <h5>\r\n                            <textarea name=\"msg\" cols={66} rows={30} form=\"dizzy\"\r\n                                value={this.props.jsonStorage.textCS} onChange={this.inputText} />\r\n                        </h5>\r\n                    </div>\r\n                    : \"выберите песню\")\r\n                    : \"loading..\"}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass SubmitButton extends React.Component<IProps> {\r\n    url: string;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.submit = this.submit.bind(this);\r\n        this.url = '/api/update';\r\n    }\r\n\r\n    submit(e: any) {\r\n        e.preventDefault();\r\n        var formData = new FormData(this.props.formId);\r\n        var checkboxesArray = (formData.getAll(\"chkButton\")).map(a => Number(a) + 1);\r\n        var formMessage = formData.get(\"msg\");\r\n        const item = {\r\n            CheckedCheckboxesJS: checkboxesArray,\r\n            TextJS: formMessage,\r\n            TitleJS: this.props.jsonStorage.titleCS,\r\n            SavedTextId: window.textId\r\n            //InitialCheckboxes: this.props.jsonStorage.initialCheckboxes.map(a => Number(a))\r\n        };\r\n        var requestBody = JSON.stringify(item);\r\n        Loader.postData(this.props.listener, requestBody, this.url);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        //отменяй подписки и асинхронную загрузку\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"submitStyle\">\r\n                <input type=\"checkbox\" id=\"submitButton\" className=\"regular-checkbox\" onClick={this.submit} />\r\n                <label htmlFor=\"submitButton\">Сохранить</label>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default UpdateView;","import * as React from 'react';\r\nimport { Loader } from \"./loader\";\r\n\r\ninterface IState {\r\n    data: any;\r\n    time: any;\r\n}\r\n\r\ninterface IProps {\r\n    listener: any;\r\n    formId: any;\r\n    jsonStorage: any;\r\n    id: any;\r\n}\r\n\r\nclass CreateView extends React.Component<IState> {\r\n    url: string;\r\n    formId: any;\r\n    mounted: boolean;\r\n\r\n    public state: IState = {\r\n        data: null,\r\n        time: null//?????получи реальное время иначе key отвалятся\r\n    }\r\n\r\n    mainForm: React.RefObject<HTMLFormElement>;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.url = \"/api/create\";\r\n        this.formId = null;\r\n        this.mounted = true;\r\n\r\n        this.mainForm = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.formId = this.mainForm.current;\r\n        Loader.getData(this, this.url);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.mounted = false;\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        var id = 0;\r\n        if (this.state.data) id = Number(this.state.data.savedTextId);\r\n        if (id !== 0) window.textId = id;\r\n    }\r\n\r\n    render() {\r\n        var checkboxes = [];\r\n        if (this.state.data != null && this.state.data.genresNamesCS != null) {\r\n            for (var i = 0; i < this.state.data.genresNamesCS.length; i++) {\r\n                checkboxes.push(<Checkbox key={`checkbox ${i}${this.state.time}`} id={i} jsonStorage={this.state.data} listener formId/>);\r\n            }\r\n        }\r\n\r\n        var jsonStorage = this.state.data;\r\n        if (jsonStorage) {\r\n            if (!jsonStorage.textCS) jsonStorage.textCS = \"\";\r\n            if (!jsonStorage.titleCS) jsonStorage.titleCS = \"\";\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <form ref={this.mainForm}\r\n                    id=\"dizzy\">\r\n                    {checkboxes}\r\n                    {this.state.data != null &&\r\n                        <SubmitButton listener={this} formId={this.formId} id jsonStorage/>\r\n                    }\r\n                </form>\r\n                {this.state.data != null &&\r\n                    <Message formId={this.formId} jsonStorage={jsonStorage} listener id/>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Checkbox extends React.Component<IProps> {\r\n\r\n    render() {\r\n        var checked = this.props.jsonStorage.isGenreCheckedCS[this.props.id] === \"checked\" ? true : false;\r\n        var getGenreName = (i: number) => { return this.props.jsonStorage.genresNamesCS[i]; };\r\n        return (\r\n            <div id=\"checkboxStyle\">\r\n                <input name=\"chkButton\" value={this.props.id} type=\"checkbox\" id={this.props.id} className=\"regular-checkbox\"\r\n                    defaultChecked={checked} />\r\n                <label htmlFor={this.props.id}>{getGenreName(this.props.id)}</label>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass CheckboxBts extends React.Component<IProps> {\r\n\r\n    render() {\r\n        var checked = this.props.jsonStorage.isGenreCheckedCS[this.props.id] === \"checked\" ? true : false;\r\n        var getGenreName = (i: number) => { return this.props.jsonStorage.genresNamesCS[i]; };\r\n        return (\r\n            //нужен site.css\r\n            <label className=\"checkbox-btn\">\r\n                    <input name=\"chkButton\" value={this.props.id} type=\"checkbox\" id={this.props.id}\r\n                    defaultChecked = { checked } />\r\n                    <span style={{ lineHeight: 30 + 'px' }}>{getGenreName(this.props.id)}</span>\r\n            </label>\r\n        );\r\n    }\r\n}\r\n\r\nclass Message extends React.Component<IProps> {\r\n    inputText = (e: any) => {\r\n        const newText = e.target.value;\r\n        this.props.jsonStorage.textCS = newText;\r\n        this.forceUpdate();\r\n    }\r\n\r\n    inputTitle = (e: any) => {\r\n        const newText = e.target.value;\r\n        this.props.jsonStorage.titleCS = newText;\r\n        this.forceUpdate();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div >\r\n                <p />\r\n                {this.props.jsonStorage != null ?\r\n                    <div>\r\n                        <h5>\r\n                            <textarea name=\"ttl\" cols={66} rows={1} form=\"dizzy\"\r\n                                value={this.props.jsonStorage.titleCS} onChange={this.inputTitle} />\r\n                        </h5>\r\n                        <h5>\r\n                            <textarea name=\"msg\" cols={66} rows={30} form=\"dizzy\"\r\n                                value={this.props.jsonStorage.textCS} onChange={this.inputText} />\r\n                        </h5>\r\n                    </div>\r\n                    : \"loading..\"}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass SubmitButton extends React.Component<IProps> {\r\n    url: string;\r\n    //\r\n    corsAddress: string;\r\n    findUrl: string;\r\n    readUrl: string;\r\n    requestBody: any;\r\n    storage: string[] = [];\r\n    //\r\n    state: any;\r\n    btn: any;\r\n\r\n    private credos: \"omit\" | \"same-origin\" | \"include\";\r\n    \r\n    constructor(props: any) {\r\n        super(props);\r\n        this.submit = this.submit.bind(this);\r\n        this.url = \"/api/create\";\r\n        this.state = 0;\r\n        \r\n        // TODO: вынеси в Loader или меню\r\n        this.credos = Loader.credos; // \"include\"; // or \"same-origin\"\r\n        this.corsAddress = Loader.corsAddress; // \"http://localhost:5000\";\r\n        \r\n        this.findUrl = this.corsAddress + \"/api/find\";\r\n        this.readUrl = this.corsAddress + \"/api/read/title\";\r\n    }\r\n\r\n    cancel = (e: any) => {\r\n        e.preventDefault();\r\n        this.btn.style.display = \"none\";\r\n        \r\n        // TODO: костыль чтоб получить [Already Exists] - нужна существующая песня, поправь\r\n        this.requestBody = JSON.stringify({\r\n            \"CheckedCheckboxesJS\":[1],\r\n            \"TextJS\":\"Stub\",\r\n            \"TitleJS\":\"Nirvana - In Bloom\" // \r\n            });\r\n        // \"Nirvana - In Bloom\";\r\n        Loader.postData(this.props.listener, this.requestBody, this.url);\r\n    }\r\n    \r\n    componentDidMount() {\r\n        this.btn  = (document.getElementById('cancelButton') as HTMLInputElement);\r\n        this.btn.style.display = \"none\";\r\n    }\r\n\r\n    async submit(e: any) {\r\n        e.preventDefault();\r\n        \r\n        this.btn.style.display = \"none\";\r\n        \r\n        if (this.state === 1)\r\n        {\r\n            // подтверждение\r\n            this.state = 0;\r\n            Loader.postData(this.props.listener, this.requestBody, this.url);\r\n            return;\r\n        }\r\n        \r\n        var formData = new FormData(this.props.formId);\r\n        var checkboxesArray = (formData.getAll('chkButton')).map(a => Number(a) + 1);\r\n        var formMessage = formData.get('msg');\r\n        var formTitle = formData.get('ttl');\r\n        const item = {\r\n            CheckedCheckboxesJS: checkboxesArray,\r\n            TextJS: formMessage,\r\n            TitleJS: formTitle\r\n        };\r\n        this.requestBody = JSON.stringify(item);\r\n\r\n        // TODO: вынеси в Loader или меню\r\n        this.storage = [];\r\n        var promise = this.finder(formMessage, formTitle);\r\n        await promise;\r\n        \r\n        if (this.storage.length > 0)\r\n        {\r\n            // переключение в \"подтверждение или отбой сохранения\"\r\n            this.btn.style.display = \"block\";\r\n            this.state = 1;\r\n            return;\r\n        }\r\n\r\n        // совпадения не обнаружены\r\n        Loader.postData(this.props.listener, this.requestBody, this.url);\r\n    }\r\n    \r\n    finder = async (formMessage: string | File | null, formTitle: string | File | null) => {\r\n        let promise;\r\n\r\n        if (typeof formMessage === \"string\") {\r\n            formMessage = formMessage.replace(/\\r\\n|\\r|\\n/g, \" \");\r\n        }\r\n\r\n        // TODO: вынеси в Loader или меню \r\n        try {\r\n            promise = window.fetch(this.findUrl + \"?text=\" + formMessage + \" \" + formTitle\r\n                , {credentials: this.credos})\r\n                .then(response => response.ok ? response.json() : Promise.reject(response))\r\n                .then(data => this.checkScanResult(data));\r\n        } catch (err) {\r\n            console.log(\"Find when create: try-catch err\");\r\n        }\r\n\r\n        await promise;\r\n    }\r\n    \r\n    checkScanResult = async (res: any) => {\r\n        let result = [];\r\n        let response = res['res'];\r\n        if (response === undefined) {\r\n            return;\r\n        }\r\n\r\n        var array = Object.keys(response).map((key) => [Number(key), response[key]]);\r\n        array.sort(function (a, b) {\r\n            return b[1] - a[1]\r\n        });\r\n\r\n        for (let index in array) {\r\n            result.push(array[index]);\r\n        }\r\n\r\n        if (result.length === 0) {\r\n            return;\r\n        }\r\n\r\n        for (let ind = 0; ind < result.length; ind++) {\r\n            // лучше reject\r\n            if (this.storage.length >= 10) {\r\n                continue;\r\n            }\r\n\r\n            let i = String(result[ind][0]);\r\n\r\n            // TODO: вынеси в Loader или меню \r\n            //  получаем имена возможных совпадений\r\n            var promise;\r\n            try {\r\n                promise = window.fetch(this.readUrl + \"?id=\" + i,\r\n                    {credentials: this.credos})\r\n                    .then(response => response.ok ? response.json() : Promise.reject(response))\r\n                    .then(data => this.getTitle(data));\r\n            } catch (err) {\r\n                console.log(\"Find when create: try-catch err\");\r\n            }\r\n\r\n            await promise;\r\n        }\r\n    }\r\n    \r\n    getTitle = (data: any) => {\r\n        this.storage.push((data.res + '\\r\\n'));\r\n\r\n        let time = String(Date.now());\r\n        // stub\r\n        data = {\r\n            \"genresNamesCS\": this.storage,//this.props.listener.state.data.genresNamesCS, \r\n            \"isGenreCheckedCS\": [], \r\n            \"textCS\": JSON.parse(this.requestBody).TextJS\r\n        };\r\n        this.props.listener.setState({ data , time });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        //отменяй подписки и асинхронную загрузку\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"submitStyle\">\r\n                <input type=\"checkbox\" id=\"submitButton\" className=\"regular-checkbox\" />\r\n                <label htmlFor=\"submitButton\" onClick={this.submit}>Создать</label>\r\n                  <div id=\"cancelButton\">\r\n                    <input type=\"checkbox\" id=\"submitButton\" className=\"regular-checkbox\" />\r\n                    <label htmlFor=\"submitButton\" onClick={this.cancel}>Отменить</label>\r\n                  </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CreateView;","import * as React from 'react';\r\nimport { Loader } from \"./loader\";\r\n\r\ninterface IState {\r\n    data: any;\r\n}\r\ninterface IProps {\r\n    listener: any;\r\n}\r\n\r\nclass CatalogView extends React.Component<IProps, IState> {\r\n    url: string;\r\n    mounted: boolean;\r\n    logoutUrl: string;\r\n    corsAddress: string;\r\n\r\n    private credos: \"omit\" | \"same-origin\" | \"include\";\r\n\r\n    public state: IState = {\r\n    data: null\r\n}\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.url = \"/api/catalog\";\r\n        this.mounted = true;\r\n        \r\n        // TODO: вынеси logout и credos в Loader или меню\r\n        this.credos = Loader.credos; // \"include\"; // or \"same-origin\"\r\n        this.corsAddress = Loader.corsAddress; // \"http://localhost:5000\";\r\n        this.logoutUrl = this.corsAddress + \"/account/logout\";\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.mounted = false;\r\n    }\r\n\r\n    componentDidMount() {\r\n        Loader.getDataById(this, 1, this.url);\r\n    }\r\n    \r\n    click = (e: any) => {\r\n        e.preventDefault();\r\n        var target = Number(e.target.id.slice(7));\r\n        const item = {\r\n            pageNumber: this.state.data.pageNumber,\r\n            navigationButtons: [target]\r\n        };\r\n        var requestBody = JSON.stringify(item);\r\n        Loader.postData(this, requestBody, this.url);\r\n    }\r\n    \r\n    logout = (e: any) => {\r\n        e.preventDefault();\r\n        document.cookie = 'rsse_auth = false';\r\n        // TODO: вынеси в Loader или меню\r\n        window.fetch(this.logoutUrl,\r\n            {credentials: this.credos})\r\n            .then(response => response.ok ? console.log(\"Logout Ok\") : console.log(\"Logout Err\"));\r\n    }\r\n\r\n    redirect = (e: any) => {\r\n        e.preventDefault();\r\n        var id = Number(e.target.id);\r\n        this.props.listener.setState({ id: id });\r\n    }\r\n\r\n    delete = (e: any) => {\r\n        e.preventDefault();\r\n        var id = Number(e.target.id);\r\n        console.log('You want to delete song with id: ' + id);\r\n        Loader.deleteDataById(this, id, this.url, this.state.data.pageNumber);\r\n    }\r\n\r\n    render() {\r\n        if (!this.state.data) return null;\r\n        var songs = [];\r\n        for (let i = 0; i < this.state.data.titlesAndIds.length; i++) {\r\n            songs.push(\r\n                <tr key={\"song \" + i} className=\"bg-warning\">\r\n                    <td></td>\r\n                    <td>\r\n                        <button className=\"btn btn-outline-light\" id={this.state.data.titlesAndIds[i].item2}\r\n                            onClick={this.redirect}>{this.state.data.titlesAndIds[i].item1}\r\n                        </button>\r\n                    </td>\r\n                    <td>\r\n                        <button className=\"btn btn-outline-light\" id={this.state.data.titlesAndIds[i].item2} onClick={this.delete}>\r\n                            &#10060;\r\n                        </button>\r\n                    </td>\r\n                </tr>);\r\n        }\r\n\r\n        return (\r\n            <div className=\"row\">\r\n                <p style={{ marginLeft: 12 + '%' }}>\r\n                    Всего песен: {this.state.data.songsCount} &nbsp;\r\n                    Страница: {this.state.data.pageNumber} &nbsp;\r\n                </p>\r\n                <p></p>\r\n                <p></p>\r\n                <table className=\"table\" id=\"catalogTable\">\r\n                    <thead className=\"thead-dark \">\r\n                        <tr>\r\n                            <th ></th>\r\n                            <th >\r\n                                <form>\r\n                                    <button id=\"js-nav-1\" className=\"btn btn-info\" onClick={this.click}>\r\n                                         &lt;Назад\r\n                                    </button>\r\n                                    &nbsp;\r\n                                    <button id=\"js-nav-2\" className=\"btn btn-info\" onClick={this.click}>\r\n                                          Вперёд&gt;\r\n                                    </button>\r\n                                    &nbsp;\r\n                                    <button id=\"js-logout\" className=\"btn btn-outline-light\" onClick={this.logout}>\r\n                                        &lt;LogOut&gt;\r\n                                    </button>\r\n                                </form>\r\n                            </th>\r\n                            <th ></th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {songs}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CatalogView;","import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\n\r\nimport { HomeView } from \"./read\";\r\nimport UpdateView from \"./update\";\r\nimport CreateView from \"./create\";\r\nimport CatalogView from \"./catalog\";\r\nimport { Login } from \"./login\";\r\n\r\ndeclare global {\r\n    interface Window { textId: number }\r\n}\r\nwindow.textId = 0;\r\n\r\ninterface IProps {\r\n    visibilityCss: string[];\r\n    visibilityFlag: boolean[];\r\n    menu: string[];\r\n}\r\n\r\ninterface IState {\r\n    id: number | any;\r\n}\r\n\r\nexport default class Menu extends React.Component<IProps, IState> {\r\n    visibilityCss: string[];\r\n    visibilityFlag: boolean[];\r\n    menu: string[];\r\n    buttons: any;\r\n\r\n    public static defaultProps: Partial<IProps> = {\r\n        visibilityCss: [\"act\", \"pas\", \"pas\", \"pas\"],\r\n        visibilityFlag: [true, false, false, false],\r\n        menu: [\"Посмотреть\", \"Поменять\", \"Создать\", \"Каталог\"]\r\n    }\r\n    public state: IState = {\r\n        id: null\r\n    }\r\n\r\n    constructor(a: IProps) {\r\n        super(a);\r\n        this.select = this.select.bind(this);\r\n        this.visibilityCss = [\"act\", \"pas\", \"pas\", \"pas\"];\r\n        this.visibilityFlag = [true, false, false, false];\r\n        this.menu = [\"Посмотреть\", \"Поменять\", \"Создать\", \"Каталог\"];\r\n    }\r\n\r\n    select(e: any) {\r\n        var target = Number(e.currentTarget.getAttribute('id').slice(5));\r\n        //если меняем невыбранное\r\n        if (target === 1 && window.textId === 0) return;\r\n\r\n        this.visibilityFlag.forEach((value, index) => this.visibilityFlag[index] = false);\r\n        this.visibilityFlag[target] = !this.visibilityFlag[target];\r\n        this.forceUpdate();//this.setState(this.state)\r\n    }\r\n\r\n    handleClick(event: any) {\r\n        event.preventDefault();\r\n        alert(event.currentTarget.tagName);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.state.id) this.setState({ id: null });\r\n        if (!this.visibilityFlag[0]) {\r\n            //костыль, убирает кнопку \"Поиск\"\r\n            ReactDOM.render(\r\n                <div>\r\n                </div>,\r\n                document.querySelector(\"#searchButton1\")\r\n            );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        //костыль - переключаемся из catalog на changeText\r\n        if (this.state.id) {\r\n            this.visibilityFlag = [false, true, false, false];\r\n            window.textId = this.state.id;\r\n        }\r\n\r\n        this.visibilityFlag.forEach((value, index) => this.visibilityFlag[index] ?\r\n            this.visibilityCss[index] = \"act\" : this.visibilityCss[index] = \"pas\");\r\n\r\n        this.buttons = [];\r\n        for (let i = 0; i < 4; i++) {\r\n            this.buttons.push(<button key={\"menu \" + i} onClick={this.select} id={\"menu \" + String(i)}\r\n                className={this.visibilityCss[i]}\r\n            //className=\"btn btn-info\" style={{ margin: 10 + 'px' }}\r\n            >\r\n                {this.menu[i]}</button>);\r\n        }\r\n\r\n        //+TODO: не отображать кнопку пока не загрузилось\r\n        //+TODO: менять цвет кнопки при выполнении POST запроса\r\n        //+TODO: зачем view={this.visibilityFlag[0]}\r\n        //TODO: список жанров точно один на всю сессию (кол-во песен в них будет отличаться) - зачем его грузить каждый раз?\r\n        //TODO: экран некрасиво мигает при переключении пунктов меню\r\n\r\n        return (\r\n            <div>\r\n                <div id=\"header\">\r\n                    {this.buttons}\r\n                </div>\r\n                {/*первый пункт меню*/}\r\n                {this.visibilityFlag[0] === true &&\r\n                    <div id=\"renderContainer1\">\r\n                        <HomeView data />\r\n                    </div>\r\n                }\r\n                {/*второй пункт меню*/}\r\n                {this.visibilityFlag[1] === true &&\r\n                    <div id=\"renderContainer\">\r\n                        <UpdateView listener formId id jsonStorage />\r\n                    </div>\r\n                }\r\n                {/*третий пункт меню*/}\r\n                {this.visibilityFlag[2] === true &&\r\n                    <div id=\"renderContainer\">\r\n                        <CreateView data time />\r\n                    </div>\r\n                }\r\n                {/*четвертый пункт меню*/}\r\n                {this.visibilityFlag[3] === true &&\r\n                    <div id=\"renderContainer\">\r\n                        <CatalogView listener={this} />\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nReactDOM.render(\r\n    <Login listener={this} formId jsonStorage id/>\r\n    , document.querySelector(\"#renderLoginForm\")\r\n);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Menu from \"./jsx/menu\";\r\nimport './bootstrap.css';\r\nimport './react.css';\r\n\r\nconsole.log('start');\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Menu />\r\n    </React.StrictMode>\r\n  ,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n//reportWebVitals();\r\n\r\n//ReactDOM.render(\r\n//    <React.StrictMode>\r\n//        <Test />\r\n//    </React.StrictMode>\r\n//    ,\r\n//    document.getElementById('root')\r\n//);\r\n\r\n// visibilityCss={[]} visibilityFlag={[]} menu={[]}"],"sourceRoot":""}